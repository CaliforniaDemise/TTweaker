plugins {
    id 'java'
    id 'com.gtnewhorizons.retrofuturagradle' version '1.4.1'
}

version = project.mod_version
group = project.maven_group
archivesBaseName = project.archives_base_name

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'
}

java {
    toolchain {
        languageVersion.set(JavaLanguageVersion.of(8))
    }
}

configurations {
    embed
    implementation.extendsFrom(embed)
}

minecraft {
    mcVersion = '1.12.2'
    username = 'Developer'
    
    def args = ["-ea:${project.group}"]
    args << '-Dfml.coreMods.load=' + coremod_plugin_class_name
    args << "-Xms128m" << "-Xmx2048m"
    extraRunJvmArguments.addAll(args)
    useDependencyAccessTransformers = true
    injectedTags.put('VERSION', project.version)
}

tasks.injectTags.configure {
    outputClassName.set("${project.group}.${project.mod_id}.Tags")
}

repositories {
    maven {
        name 'CleanroomMC Maven'
        url 'https://maven.cleanroommc.com'
    }
    mavenLocal() // Must be last for caching to work
}

apply from: 'dependencies.gradle'

// Adds Access Transformer files to tasks
if (project.use_access_transformer.toBoolean()) {
    for (File at : sourceSets.getByName("main").resources.files) {
        if (at.name.toLowerCase().endsWith("_at.cfg")) {
            tasks.deobfuscateMergedJarToSrg.accessTransformerFiles.from(at)
            tasks.srgifyBinpatchedJar.accessTransformerFiles.from(at)
        }
    }
}

processResources {
    // This will ensure that this task is redone when the versions change
    inputs.property 'version', project.version
    inputs.property 'mcversion', project.minecraft.version
    
    // Replace various properties in mcmod.info and pack.mcmeta if applicable
    filesMatching(['mcmod.info', 'pack.mcmeta']) { fcd ->
        // Replace version and mcversion
        fcd.expand (
                'id': project.mod_id,
                'name': project.mod_name,
                'version': project.version,
                'mcversion': project.minecraft.version
        )
    }
    
    if (project.use_access_transformer.toBoolean()) {
        rename '(.+_at.cfg)', 'META-INF/$1' // Make sure Access Transformer files are in META-INF folder
    }
}

jar {
    manifest {
        def attribute_map = [:]
        if (project.use_coremod.toBoolean()) {
            attribute_map['FMLCorePlugin'] = project.coremod_plugin_class_name
            if (project.include_mod.toBoolean()) {
                attribute_map['FMLCorePluginContainsFMLMod'] = true
                attribute_map['ForceLoadAsMod'] = project.gradle.startParameter.taskNames[0] == "build"
            }
        }
        if (project.use_access_transformer.toBoolean()) {
            attribute_map['FMLAT'] = project.mod_id + '_at.cfg'
        }
        attributes(attribute_map)
    }
    // Add all embedded dependencies into the jar
    from(provider{ configurations.embed.collect {it.isDirectory() ? it : zipTree(it)} })
}